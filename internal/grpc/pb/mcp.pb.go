// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: mcp.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerStatus int32

const (
	ServerStatus_STOPPED  ServerStatus = 0
	ServerStatus_STARTING ServerStatus = 1
	ServerStatus_RUNNING  ServerStatus = 2
	ServerStatus_STOPPING ServerStatus = 3
	ServerStatus_ERROR    ServerStatus = 4
)

// Enum value maps for ServerStatus.
var (
	ServerStatus_name = map[int32]string{
		0: "STOPPED",
		1: "STARTING",
		2: "RUNNING",
		3: "STOPPING",
		4: "ERROR",
	}
	ServerStatus_value = map[string]int32{
		"STOPPED":  0,
		"STARTING": 1,
		"RUNNING":  2,
		"STOPPING": 3,
		"ERROR":    4,
	}
)

func (x ServerStatus) Enum() *ServerStatus {
	p := new(ServerStatus)
	*p = x
	return p
}

func (x ServerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[0].Descriptor()
}

func (ServerStatus) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[0]
}

func (x ServerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerStatus.Descriptor instead.
func (ServerStatus) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0}
}

type EventType int32

const (
	EventType_ALL           EventType = 0
	EventType_SERVER_STATUS EventType = 1
	EventType_TOOL_UPDATE   EventType = 2
	EventType_CONFIG_CHANGE EventType = 3
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "ALL",
		1: "SERVER_STATUS",
		2: "TOOL_UPDATE",
		3: "CONFIG_CHANGE",
	}
	EventType_value = map[string]int32{
		"ALL":           0,
		"SERVER_STATUS": 1,
		"TOOL_UPDATE":   2,
		"CONFIG_CHANGE": 3,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[1].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[1]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{1}
}

// Basic messages
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0}
}

type ServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerRequest) Reset() {
	*x = ServerRequest{}
	mi := &file_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerRequest) ProtoMessage() {}

func (x *ServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerRequest.ProtoReflect.Descriptor instead.
func (*ServerRequest) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *ServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *StatusResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StatusResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PathResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathResponse) Reset() {
	*x = PathResponse{}
	mi := &file_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathResponse) ProtoMessage() {}

func (x *PathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathResponse.ProtoReflect.Descriptor instead.
func (*PathResponse) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *PathResponse) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Server related messages
type Server struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status        ServerStatus           `protobuf:"varint,5,opt,name=status,proto3,enum=mcp.ServerStatus" json:"status,omitempty"`
	Pid           int32                  `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	ToolCount     int32                  `protobuf:"varint,7,opt,name=tool_count,json=toolCount,proto3" json:"tool_count,omitempty"`
	Tools         []*Tool                `protobuf:"bytes,8,rep,name=tools,proto3" json:"tools,omitempty"`
	LastUpdated   int64                  `protobuf:"varint,9,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"` // Unix timestamp
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Server) Reset() {
	*x = Server{}
	mi := &file_mcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{4}
}

func (x *Server) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Server) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Server) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Server) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Server) GetStatus() ServerStatus {
	if x != nil {
		return x.Status
	}
	return ServerStatus_STOPPED
}

func (x *Server) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Server) GetToolCount() int32 {
	if x != nil {
		return x.ToolCount
	}
	return 0
}

func (x *Server) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Server) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type ServerList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*Server              `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	Order         []string               `protobuf:"bytes,2,rep,name=order,proto3" json:"order,omitempty"` // Preserved JSON order
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerList) Reset() {
	*x = ServerList{}
	mi := &file_mcp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerList) ProtoMessage() {}

func (x *ServerList) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerList.ProtoReflect.Descriptor instead.
func (*ServerList) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{5}
}

func (x *ServerList) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ServerList) GetOrder() []string {
	if x != nil {
		return x.Order
	}
	return nil
}

// Tool related messages
type Tool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_mcp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{6}
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Tool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ToolList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tools         []*Tool                `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolList) Reset() {
	*x = ToolList{}
	mi := &file_mcp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolList) ProtoMessage() {}

func (x *ToolList) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolList.ProtoReflect.Descriptor instead.
func (*ToolList) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{7}
}

func (x *ToolList) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

// Configuration messages
type Config struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	ConfigPath    string                   `protobuf:"bytes,1,opt,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	Servers       map[string]*ServerConfig `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ServerOrder   []string                 `protobuf:"bytes,3,rep,name=server_order,json=serverOrder,proto3" json:"server_order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_mcp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetConfigPath() string {
	if x != nil {
		return x.ConfigPath
	}
	return ""
}

func (x *Config) GetServers() map[string]*ServerConfig {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *Config) GetServerOrder() []string {
	if x != nil {
		return x.ServerOrder
	}
	return nil
}

type ServerConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerConfig) Reset() {
	*x = ServerConfig{}
	mi := &file_mcp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerConfig) ProtoMessage() {}

func (x *ServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerConfig.ProtoReflect.Descriptor instead.
func (*ServerConfig) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{9}
}

func (x *ServerConfig) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ServerConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Streaming messages
type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventTypes    []EventType            `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=mcp.EventType" json:"event_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_mcp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeRequest) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type Event struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Type      EventType              `protobuf:"varint,1,opt,name=type,proto3,enum=mcp.EventType" json:"type,omitempty"`
	Timestamp int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Event_ServerStatus
	//	*Event_ToolUpdate
	//	*Event_ConfigChange
	Payload       isEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_mcp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_ALL
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetPayload() isEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetServerStatus() *ServerStatusEvent {
	if x != nil {
		if x, ok := x.Payload.(*Event_ServerStatus); ok {
			return x.ServerStatus
		}
	}
	return nil
}

func (x *Event) GetToolUpdate() *ToolUpdateEvent {
	if x != nil {
		if x, ok := x.Payload.(*Event_ToolUpdate); ok {
			return x.ToolUpdate
		}
	}
	return nil
}

func (x *Event) GetConfigChange() *ConfigChangeEvent {
	if x != nil {
		if x, ok := x.Payload.(*Event_ConfigChange); ok {
			return x.ConfigChange
		}
	}
	return nil
}

type isEvent_Payload interface {
	isEvent_Payload()
}

type Event_ServerStatus struct {
	ServerStatus *ServerStatusEvent `protobuf:"bytes,3,opt,name=server_status,json=serverStatus,proto3,oneof"`
}

type Event_ToolUpdate struct {
	ToolUpdate *ToolUpdateEvent `protobuf:"bytes,4,opt,name=tool_update,json=toolUpdate,proto3,oneof"`
}

type Event_ConfigChange struct {
	ConfigChange *ConfigChangeEvent `protobuf:"bytes,5,opt,name=config_change,json=configChange,proto3,oneof"`
}

func (*Event_ServerStatus) isEvent_Payload() {}

func (*Event_ToolUpdate) isEvent_Payload() {}

func (*Event_ConfigChange) isEvent_Payload() {}

type ServerStatusEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerName    string                 `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	OldStatus     ServerStatus           `protobuf:"varint,2,opt,name=old_status,json=oldStatus,proto3,enum=mcp.ServerStatus" json:"old_status,omitempty"`
	NewStatus     ServerStatus           `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=mcp.ServerStatus" json:"new_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerStatusEvent) Reset() {
	*x = ServerStatusEvent{}
	mi := &file_mcp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusEvent) ProtoMessage() {}

func (x *ServerStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusEvent.ProtoReflect.Descriptor instead.
func (*ServerStatusEvent) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{12}
}

func (x *ServerStatusEvent) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ServerStatusEvent) GetOldStatus() ServerStatus {
	if x != nil {
		return x.OldStatus
	}
	return ServerStatus_STOPPED
}

func (x *ServerStatusEvent) GetNewStatus() ServerStatus {
	if x != nil {
		return x.NewStatus
	}
	return ServerStatus_STOPPED
}

type ToolUpdateEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerName    string                 `protobuf:"bytes,1,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ToolCount     int32                  `protobuf:"varint,2,opt,name=tool_count,json=toolCount,proto3" json:"tool_count,omitempty"`
	Tools         []*Tool                `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolUpdateEvent) Reset() {
	*x = ToolUpdateEvent{}
	mi := &file_mcp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolUpdateEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolUpdateEvent) ProtoMessage() {}

func (x *ToolUpdateEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolUpdateEvent.ProtoReflect.Descriptor instead.
func (*ToolUpdateEvent) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{13}
}

func (x *ToolUpdateEvent) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ToolUpdateEvent) GetToolCount() int32 {
	if x != nil {
		return x.ToolCount
	}
	return 0
}

func (x *ToolUpdateEvent) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

type ConfigChangeEvent struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ServersAdded    []string               `protobuf:"bytes,1,rep,name=servers_added,json=serversAdded,proto3" json:"servers_added,omitempty"`
	ServersRemoved  []string               `protobuf:"bytes,2,rep,name=servers_removed,json=serversRemoved,proto3" json:"servers_removed,omitempty"`
	ServersModified []string               `protobuf:"bytes,3,rep,name=servers_modified,json=serversModified,proto3" json:"servers_modified,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfigChangeEvent) Reset() {
	*x = ConfigChangeEvent{}
	mi := &file_mcp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigChangeEvent) ProtoMessage() {}

func (x *ConfigChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigChangeEvent.ProtoReflect.Descriptor instead.
func (*ConfigChangeEvent) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigChangeEvent) GetServersAdded() []string {
	if x != nil {
		return x.ServersAdded
	}
	return nil
}

func (x *ConfigChangeEvent) GetServersRemoved() []string {
	if x != nil {
		return x.ServersRemoved
	}
	return nil
}

func (x *ConfigChangeEvent) GetServersModified() []string {
	if x != nil {
		return x.ServersModified
	}
	return nil
}

// Health check
type HealthStatus struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Healthy        bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	UptimeSeconds  int64                  `protobuf:"varint,2,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	RunningServers int32                  `protobuf:"varint,3,opt,name=running_servers,json=runningServers,proto3" json:"running_servers,omitempty"`
	TotalServers   int32                  `protobuf:"varint,4,opt,name=total_servers,json=totalServers,proto3" json:"total_servers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	mi := &file_mcp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{15}
}

func (x *HealthStatus) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *HealthStatus) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *HealthStatus) GetRunningServers() int32 {
	if x != nil {
		return x.RunningServers
	}
	return 0
}

func (x *HealthStatus) GetTotalServers() int32 {
	if x != nil {
		return x.TotalServers
	}
	return 0
}

var File_mcp_proto protoreflect.FileDescriptor

const file_mcp_proto_rawDesc = "" +
	"\n" +
	"\tmcp.proto\x12\x03mcp\"\a\n" +
	"\x05Empty\"#\n" +
	"\rServerRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"D\n" +
	"\x0eStatusResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\"\n" +
	"\fPathResponse\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"\x8c\x02\n" +
	"\x06Server\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12)\n" +
	"\x06status\x18\x05 \x01(\x0e2\x11.mcp.ServerStatusR\x06status\x12\x10\n" +
	"\x03pid\x18\x06 \x01(\x05R\x03pid\x12\x1d\n" +
	"\n" +
	"tool_count\x18\a \x01(\x05R\ttoolCount\x12\x1f\n" +
	"\x05tools\x18\b \x03(\v2\t.mcp.ToolR\x05tools\x12!\n" +
	"\flast_updated\x18\t \x01(\x03R\vlastUpdated\"I\n" +
	"\n" +
	"ServerList\x12%\n" +
	"\aservers\x18\x01 \x03(\v2\v.mcp.ServerR\aservers\x12\x14\n" +
	"\x05order\x18\x02 \x03(\tR\x05order\"R\n" +
	"\x04Tool\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"+\n" +
	"\bToolList\x12\x1f\n" +
	"\x05tools\x18\x01 \x03(\v2\t.mcp.ToolR\x05tools\"\xcf\x01\n" +
	"\x06Config\x12\x1f\n" +
	"\vconfig_path\x18\x01 \x01(\tR\n" +
	"configPath\x122\n" +
	"\aservers\x18\x02 \x03(\v2\x18.mcp.Config.ServersEntryR\aservers\x12!\n" +
	"\fserver_order\x18\x03 \x03(\tR\vserverOrder\x1aM\n" +
	"\fServersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12'\n" +
	"\x05value\x18\x02 \x01(\v2\x11.mcp.ServerConfigR\x05value:\x028\x01\"^\n" +
	"\fServerConfig\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"C\n" +
	"\x10SubscribeRequest\x12/\n" +
	"\vevent_types\x18\x01 \x03(\x0e2\x0e.mcp.EventTypeR\n" +
	"eventTypes\"\x8b\x02\n" +
	"\x05Event\x12\"\n" +
	"\x04type\x18\x01 \x01(\x0e2\x0e.mcp.EventTypeR\x04type\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x12=\n" +
	"\rserver_status\x18\x03 \x01(\v2\x16.mcp.ServerStatusEventH\x00R\fserverStatus\x127\n" +
	"\vtool_update\x18\x04 \x01(\v2\x14.mcp.ToolUpdateEventH\x00R\n" +
	"toolUpdate\x12=\n" +
	"\rconfig_change\x18\x05 \x01(\v2\x16.mcp.ConfigChangeEventH\x00R\fconfigChangeB\t\n" +
	"\apayload\"\x98\x01\n" +
	"\x11ServerStatusEvent\x12\x1f\n" +
	"\vserver_name\x18\x01 \x01(\tR\n" +
	"serverName\x120\n" +
	"\n" +
	"old_status\x18\x02 \x01(\x0e2\x11.mcp.ServerStatusR\toldStatus\x120\n" +
	"\n" +
	"new_status\x18\x03 \x01(\x0e2\x11.mcp.ServerStatusR\tnewStatus\"r\n" +
	"\x0fToolUpdateEvent\x12\x1f\n" +
	"\vserver_name\x18\x01 \x01(\tR\n" +
	"serverName\x12\x1d\n" +
	"\n" +
	"tool_count\x18\x02 \x01(\x05R\ttoolCount\x12\x1f\n" +
	"\x05tools\x18\x03 \x03(\v2\t.mcp.ToolR\x05tools\"\x8c\x01\n" +
	"\x11ConfigChangeEvent\x12#\n" +
	"\rservers_added\x18\x01 \x03(\tR\fserversAdded\x12'\n" +
	"\x0fservers_removed\x18\x02 \x03(\tR\x0eserversRemoved\x12)\n" +
	"\x10servers_modified\x18\x03 \x03(\tR\x0fserversModified\"\x9d\x01\n" +
	"\fHealthStatus\x12\x18\n" +
	"\ahealthy\x18\x01 \x01(\bR\ahealthy\x12%\n" +
	"\x0euptime_seconds\x18\x02 \x01(\x03R\ruptimeSeconds\x12'\n" +
	"\x0frunning_servers\x18\x03 \x01(\x05R\x0erunningServers\x12#\n" +
	"\rtotal_servers\x18\x04 \x01(\x05R\ftotalServers*O\n" +
	"\fServerStatus\x12\v\n" +
	"\aSTOPPED\x10\x00\x12\f\n" +
	"\bSTARTING\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\f\n" +
	"\bSTOPPING\x10\x03\x12\t\n" +
	"\x05ERROR\x10\x04*K\n" +
	"\tEventType\x12\a\n" +
	"\x03ALL\x10\x00\x12\x11\n" +
	"\rSERVER_STATUS\x10\x01\x12\x0f\n" +
	"\vTOOL_UPDATE\x10\x02\x12\x11\n" +
	"\rCONFIG_CHANGE\x10\x032\xd6\x03\n" +
	"\n" +
	"MCPManager\x12*\n" +
	"\vListServers\x12\n" +
	".mcp.Empty\x1a\x0f.mcp.ServerList\x12,\n" +
	"\tGetServer\x12\x12.mcp.ServerRequest\x1a\v.mcp.Server\x12.\n" +
	"\vStartServer\x12\x12.mcp.ServerRequest\x1a\v.mcp.Server\x12-\n" +
	"\n" +
	"StopServer\x12\x12.mcp.ServerRequest\x1a\v.mcp.Server\x12-\n" +
	"\bGetTools\x12\x12.mcp.ServerRequest\x1a\r.mcp.ToolList\x12$\n" +
	"\tGetConfig\x12\n" +
	".mcp.Empty\x1a\v.mcp.Config\x12/\n" +
	"\fReloadConfig\x12\n" +
	".mcp.Empty\x1a\x13.mcp.StatusResponse\x12.\n" +
	"\rGetConfigPath\x12\n" +
	".mcp.Empty\x1a\x11.mcp.PathResponse\x120\n" +
	"\tSubscribe\x12\x15.mcp.SubscribeRequest\x1a\n" +
	".mcp.Event0\x01\x12'\n" +
	"\x06Health\x12\n" +
	".mcp.Empty\x1a\x11.mcp.HealthStatusB3Z1github.com/tartavull/mcp-manager/internal/grpc/pbb\x06proto3"

var (
	file_mcp_proto_rawDescOnce sync.Once
	file_mcp_proto_rawDescData []byte
)

func file_mcp_proto_rawDescGZIP() []byte {
	file_mcp_proto_rawDescOnce.Do(func() {
		file_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)))
	})
	return file_mcp_proto_rawDescData
}

var file_mcp_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_mcp_proto_goTypes = []any{
	(ServerStatus)(0),         // 0: mcp.ServerStatus
	(EventType)(0),            // 1: mcp.EventType
	(*Empty)(nil),             // 2: mcp.Empty
	(*ServerRequest)(nil),     // 3: mcp.ServerRequest
	(*StatusResponse)(nil),    // 4: mcp.StatusResponse
	(*PathResponse)(nil),      // 5: mcp.PathResponse
	(*Server)(nil),            // 6: mcp.Server
	(*ServerList)(nil),        // 7: mcp.ServerList
	(*Tool)(nil),              // 8: mcp.Tool
	(*ToolList)(nil),          // 9: mcp.ToolList
	(*Config)(nil),            // 10: mcp.Config
	(*ServerConfig)(nil),      // 11: mcp.ServerConfig
	(*SubscribeRequest)(nil),  // 12: mcp.SubscribeRequest
	(*Event)(nil),             // 13: mcp.Event
	(*ServerStatusEvent)(nil), // 14: mcp.ServerStatusEvent
	(*ToolUpdateEvent)(nil),   // 15: mcp.ToolUpdateEvent
	(*ConfigChangeEvent)(nil), // 16: mcp.ConfigChangeEvent
	(*HealthStatus)(nil),      // 17: mcp.HealthStatus
	nil,                       // 18: mcp.Config.ServersEntry
}
var file_mcp_proto_depIdxs = []int32{
	0,  // 0: mcp.Server.status:type_name -> mcp.ServerStatus
	8,  // 1: mcp.Server.tools:type_name -> mcp.Tool
	6,  // 2: mcp.ServerList.servers:type_name -> mcp.Server
	8,  // 3: mcp.ToolList.tools:type_name -> mcp.Tool
	18, // 4: mcp.Config.servers:type_name -> mcp.Config.ServersEntry
	1,  // 5: mcp.SubscribeRequest.event_types:type_name -> mcp.EventType
	1,  // 6: mcp.Event.type:type_name -> mcp.EventType
	14, // 7: mcp.Event.server_status:type_name -> mcp.ServerStatusEvent
	15, // 8: mcp.Event.tool_update:type_name -> mcp.ToolUpdateEvent
	16, // 9: mcp.Event.config_change:type_name -> mcp.ConfigChangeEvent
	0,  // 10: mcp.ServerStatusEvent.old_status:type_name -> mcp.ServerStatus
	0,  // 11: mcp.ServerStatusEvent.new_status:type_name -> mcp.ServerStatus
	8,  // 12: mcp.ToolUpdateEvent.tools:type_name -> mcp.Tool
	11, // 13: mcp.Config.ServersEntry.value:type_name -> mcp.ServerConfig
	2,  // 14: mcp.MCPManager.ListServers:input_type -> mcp.Empty
	3,  // 15: mcp.MCPManager.GetServer:input_type -> mcp.ServerRequest
	3,  // 16: mcp.MCPManager.StartServer:input_type -> mcp.ServerRequest
	3,  // 17: mcp.MCPManager.StopServer:input_type -> mcp.ServerRequest
	3,  // 18: mcp.MCPManager.GetTools:input_type -> mcp.ServerRequest
	2,  // 19: mcp.MCPManager.GetConfig:input_type -> mcp.Empty
	2,  // 20: mcp.MCPManager.ReloadConfig:input_type -> mcp.Empty
	2,  // 21: mcp.MCPManager.GetConfigPath:input_type -> mcp.Empty
	12, // 22: mcp.MCPManager.Subscribe:input_type -> mcp.SubscribeRequest
	2,  // 23: mcp.MCPManager.Health:input_type -> mcp.Empty
	7,  // 24: mcp.MCPManager.ListServers:output_type -> mcp.ServerList
	6,  // 25: mcp.MCPManager.GetServer:output_type -> mcp.Server
	6,  // 26: mcp.MCPManager.StartServer:output_type -> mcp.Server
	6,  // 27: mcp.MCPManager.StopServer:output_type -> mcp.Server
	9,  // 28: mcp.MCPManager.GetTools:output_type -> mcp.ToolList
	10, // 29: mcp.MCPManager.GetConfig:output_type -> mcp.Config
	4,  // 30: mcp.MCPManager.ReloadConfig:output_type -> mcp.StatusResponse
	5,  // 31: mcp.MCPManager.GetConfigPath:output_type -> mcp.PathResponse
	13, // 32: mcp.MCPManager.Subscribe:output_type -> mcp.Event
	17, // 33: mcp.MCPManager.Health:output_type -> mcp.HealthStatus
	24, // [24:34] is the sub-list for method output_type
	14, // [14:24] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_mcp_proto_init() }
func file_mcp_proto_init() {
	if File_mcp_proto != nil {
		return
	}
	file_mcp_proto_msgTypes[11].OneofWrappers = []any{
		(*Event_ServerStatus)(nil),
		(*Event_ToolUpdate)(nil),
		(*Event_ConfigChange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mcp_proto_goTypes,
		DependencyIndexes: file_mcp_proto_depIdxs,
		EnumInfos:         file_mcp_proto_enumTypes,
		MessageInfos:      file_mcp_proto_msgTypes,
	}.Build()
	File_mcp_proto = out.File
	file_mcp_proto_goTypes = nil
	file_mcp_proto_depIdxs = nil
}
